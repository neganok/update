import psutil
import subprocess
import time
import os
import requests
from datetime import timedelta

# Danh s√°ch c√°c ti·∫øn tr√¨nh c·∫ßn kill
tienTrinh = ['flood', 'tlskill', 'bypasscf', 'killercf', 'ctccf', 'floodctc']

# C·∫•u h√¨nh Bot Telegram
TELEGRAM_TOKEN = '8039598203:AAHEmboLSteoEIvu-bSnqFUVn7A6OgDQVr4'
CHAT_ID = '7371969470'

# H√†m g·ª≠i th√¥ng b√°o qua Telegram
def send_telegram_message(message):
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    params = {'chat_id': CHAT_ID, 'text': message}
    try:
        response = requests.get(url, params=params)
        if response.status_code != 200:
            print(f"L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn Telegram: {response.status_code}")
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Telegram: {e}")

# H√†m ki·ªÉm tra t√¨nh tr·∫°ng s·ª≠ d·ª•ng RAM, CPU v√† GPU
def check_system_usage():
    ram_usage = psutil.virtual_memory().percent
    cpu_usage = psutil.cpu_percent(interval=1)
    total_cpu = psutil.cpu_count(logical=True)
    total_ram = psutil.virtual_memory().total / (1024 * 1024 * 1024)
    used_ram = psutil.virtual_memory().used / (1024 * 1024 * 1024)
    free_ram = psutil.virtual_memory().available / (1024 * 1024 * 1024)
    cpu_free = 100 - cpu_usage
    ram_free = 100 - ram_usage
    cpu_freq = psutil.cpu_freq().current

    # S·ª≠ d·ª•ng l·ªánh nvidia-smi ƒë·ªÉ l·∫•y th√¥ng tin GPU
    gpu_info = "Kh√¥ng c√≥ GPU"
    try:
        # G·ªçi l·ªánh `nvidia-smi` ƒë·ªÉ l·∫•y th√¥ng tin GPU
        result = subprocess.check_output("nvidia-smi --query-gpu=name,memory.total,memory.free,memory.used --format=csv,noheader,nounits", shell=True, encoding='utf-8')
        # K·∫øt qu·∫£ tr·∫£ v·ªÅ s·∫Ω c√≥ d·∫°ng:
        # "NVIDIA GeForce GTX 1080, 8192 MiB, 4096 MiB, 4096 MiB"
        gpu_info = result.strip()
    except subprocess.CalledProcessError:
        gpu_info = "Kh√¥ng c√≥ GPU NVIDIA ƒë∆∞·ª£c ph√°t hi·ªán ho·∫∑c `nvidia-smi` kh√¥ng kh·∫£ d·ª•ng"

    uptime_seconds = time.time() - psutil.boot_time()
    uptime = str(timedelta(seconds=int(uptime_seconds)))

    message = (
        f"üñ•Ô∏è **Tr·∫°ng th√°i h·ªá th·ªëng**:\n"
        f"---------------------------\n"
        f"‚öôÔ∏è **T·ªïng s·ªë CPU**: {total_cpu} l√µi\n"
        f"üíª **Ph·∫ßn trƒÉm s·ª≠ d·ª•ng CPU**: {cpu_usage}%\n"
        f"üåø **Ph·∫ßn trƒÉm CPU c√≤n tr·ªëng**: {cpu_free}%\n"
        f"---------------------------\n"
        f"üíæ **T·ªïng dung l∆∞·ª£ng RAM**: {total_ram:.2f} GB\n"
        f"üóÇÔ∏è **RAM ƒë√£ s·ª≠ d·ª•ng**: {used_ram:.2f} GB\n"
        f"üõë **RAM c√≤n tr·ªëng**: {free_ram:.2f} GB\n"
        f"üåø **Ph·∫ßn trƒÉm s·ª≠ d·ª•ng RAM**: {ram_usage}%\n"
        f"üåø **Ph·∫ßn trƒÉm RAM c√≤n tr·ªëng**: {ram_free}%\n"
        f"---------------------------\n"
        f"Uptime: {uptime}\n"
        f"CPU: ({total_cpu} cores) @ {cpu_freq:.2f} GHz\n"
        f"GPU: {gpu_info}\n"
    )
    
    return cpu_usage, ram_usage, message

# H√†m th·ª±c hi·ªán l·ªánh pkill v·ªõi -9 -f (kill m·∫°nh m·∫Ω)
def kill_processes():
    for process_name in tienTrinh:
        print(f"ƒêang kill ti·∫øn tr√¨nh: {process_name} v·ªõi pkill -9 -f")
        try:
            if os.geteuid() != 0:
                print("C·∫£nh b√°o: C·∫ßn quy·ªÅn root ƒë·ªÉ th·ª±c hi·ªán l·ªánh pkill.")
                return
            subprocess.run(['pkill', '-9', '-f', process_name], check=True)
            print(f"ƒê√£ kill ti·∫øn tr√¨nh: {process_name}")
        except Exception as e:
            print(f"L·ªói khi kill ti·∫øn tr√¨nh {process_name}: {e}")

# H√†m ch√≠nh ƒë·ªÉ theo d√µi h·ªá th·ªëng v√† th·ª±c thi pkill khi c·∫ßn
def monitor_system():
    last_kill_time = time.time()  # L∆∞u th·ªùi gian th·ª±c hi·ªán pkill cu·ªëi c√πng
    last_telegram_time = time.time()  # L∆∞u th·ªùi gian g·ª≠i th√¥ng b√°o Telegram cu·ªëi c√πng
    last_message = ""  # Bi·∫øn l∆∞u th√¥ng ƒëi·ªáp g·∫ßn nh·∫•t ƒë·ªÉ so s√°nh v√† tr√°nh g·ª≠i tr√πng l·∫∑p

    while True:
        current_time = time.time()

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªá th·ªëng m·ªói 7 gi√¢y
        if current_time - last_telegram_time >= 7:
            cpu_usage, ram_usage, system_message = check_system_usage()  # L·∫•y th√¥ng tin t√†i nguy√™n
            if system_message != last_message:
                send_telegram_message(system_message)  # G·ª≠i th√¥ng b√°o
                last_message = system_message  # C·∫≠p nh·∫≠t th√¥ng ƒëi·ªáp v·ª´a g·ª≠i
            last_telegram_time = current_time  # C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i th√¥ng b√°o

        # Ki·ªÉm tra t√†i nguy√™n h·ªá th·ªëng n·∫øu s·ª≠ d·ª•ng qu√° 95% RAM
        cpu_usage, ram_usage, _ = check_system_usage()  # C·∫≠p nh·∫≠t t√†i nguy√™n

        if ram_usage > 95:  # Ch·ªâ pkill khi RAM s·ª≠ d·ª•ng tr√™n 95%
            print("‚ö†Ô∏è C·∫£nh b√°o: T√†i nguy√™n RAM v∆∞·ª£t qu√° 95%. ƒêang th·ª±c hi·ªán pkill...")
            send_telegram_message("‚ö†Ô∏è C·∫£nh b√°o: T√†i nguy√™n RAM v∆∞·ª£t qu√° 95%. ƒêang th·ª±c hi·ªán pkill...")
            kill_processes()
            last_kill_time = current_time  # C·∫≠p nh·∫≠t th·ªùi gian pkill

        # Th·ª±c hi·ªán pkill m·ªói 5 ph√∫t
        if current_time - last_kill_time >= 300:
            print("‚è≥ 5 ph√∫t ƒë√£ tr√¥i qua, th·ª±c hi·ªán pkill t·∫•t c·∫£ ti·∫øn tr√¨nh")
            send_telegram_message("‚è≥ ƒêang th·ª±c hi·ªán pkill t·∫•t c·∫£ ti·∫øn tr√¨nh...")
            kill_processes()
            last_kill_time = current_time  # C·∫≠p nh·∫≠t th·ªùi gian pkill t·ªïng

        time.sleep(1)  # Ch·ªù 1 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i

if __name__ == "__main__":
    monitor_system()
